// Code generated from parser/FGG.g4 by ANTLR 4.7.1. DO NOT EDIT.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 22, 158,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23,
	9, 23, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 7,
	3, 7, 3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3, 10, 3, 11, 3, 11, 3, 11, 3, 11,
	3, 11, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3,
	12, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14,
	3, 14, 3, 14, 3, 14, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3,
	16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 17, 3, 17, 3, 17, 3, 17,
	3, 17, 3, 18, 5, 18, 114, 10, 18, 3, 19, 3, 19, 3, 20, 3, 20, 3, 20, 3,
	20, 7, 20, 122, 10, 20, 12, 20, 14, 20, 125, 11, 20, 3, 21, 6, 21, 128,
	10, 21, 13, 21, 14, 21, 129, 3, 21, 3, 21, 3, 22, 3, 22, 3, 22, 3, 22,
	7, 22, 138, 10, 22, 12, 22, 14, 22, 141, 11, 22, 3, 22, 3, 22, 3, 22, 3,
	22, 3, 22, 3, 23, 3, 23, 3, 23, 3, 23, 7, 23, 152, 10, 23, 12, 23, 14,
	23, 155, 11, 23, 3, 23, 3, 23, 3, 139, 2, 24, 3, 3, 5, 4, 7, 5, 9, 6, 11,
	7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 13, 25, 14, 27, 15, 29, 16,
	31, 17, 33, 18, 35, 2, 37, 2, 39, 19, 41, 20, 43, 21, 45, 22, 3, 2, 5,
	4, 2, 67, 92, 99, 124, 5, 2, 11, 12, 15, 15, 34, 34, 4, 2, 12, 12, 15,
	15, 2, 161, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9,
	3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2,
	17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2,
	2, 25, 3, 2, 2, 2, 2, 27, 3, 2, 2, 2, 2, 29, 3, 2, 2, 2, 2, 31, 3, 2, 2,
	2, 2, 33, 3, 2, 2, 2, 2, 39, 3, 2, 2, 2, 2, 41, 3, 2, 2, 2, 2, 43, 3, 2,
	2, 2, 2, 45, 3, 2, 2, 2, 3, 47, 3, 2, 2, 2, 5, 49, 3, 2, 2, 2, 7, 51, 3,
	2, 2, 2, 9, 53, 3, 2, 2, 2, 11, 55, 3, 2, 2, 2, 13, 57, 3, 2, 2, 2, 15,
	59, 3, 2, 2, 2, 17, 61, 3, 2, 2, 2, 19, 63, 3, 2, 2, 2, 21, 65, 3, 2, 2,
	2, 23, 70, 3, 2, 2, 2, 25, 80, 3, 2, 2, 2, 27, 85, 3, 2, 2, 2, 29, 93,
	3, 2, 2, 2, 31, 100, 3, 2, 2, 2, 33, 107, 3, 2, 2, 2, 35, 113, 3, 2, 2,
	2, 37, 115, 3, 2, 2, 2, 39, 117, 3, 2, 2, 2, 41, 127, 3, 2, 2, 2, 43, 133,
	3, 2, 2, 2, 45, 147, 3, 2, 2, 2, 47, 48, 7, 42, 2, 2, 48, 4, 3, 2, 2, 2,
	49, 50, 7, 43, 2, 2, 50, 6, 3, 2, 2, 2, 51, 52, 7, 46, 2, 2, 52, 8, 3,
	2, 2, 2, 53, 54, 7, 61, 2, 2, 54, 10, 3, 2, 2, 2, 55, 56, 7, 125, 2, 2,
	56, 12, 3, 2, 2, 2, 57, 58, 7, 97, 2, 2, 58, 14, 3, 2, 2, 2, 59, 60, 7,
	63, 2, 2, 60, 16, 3, 2, 2, 2, 61, 62, 7, 127, 2, 2, 62, 18, 3, 2, 2, 2,
	63, 64, 7, 48, 2, 2, 64, 20, 3, 2, 2, 2, 65, 66, 7, 104, 2, 2, 66, 67,
	7, 119, 2, 2, 67, 68, 7, 112, 2, 2, 68, 69, 7, 101, 2, 2, 69, 22, 3, 2,
	2, 2, 70, 71, 7, 107, 2, 2, 71, 72, 7, 112, 2, 2, 72, 73, 7, 118, 2, 2,
	73, 74, 7, 103, 2, 2, 74, 75, 7, 116, 2, 2, 75, 76, 7, 104, 2, 2, 76, 77,
	7, 99, 2, 2, 77, 78, 7, 101, 2, 2, 78, 79, 7, 103, 2, 2, 79, 24, 3, 2,
	2, 2, 80, 81, 7, 111, 2, 2, 81, 82, 7, 99, 2, 2, 82, 83, 7, 107, 2, 2,
	83, 84, 7, 112, 2, 2, 84, 26, 3, 2, 2, 2, 85, 86, 7, 114, 2, 2, 86, 87,
	7, 99, 2, 2, 87, 88, 7, 101, 2, 2, 88, 89, 7, 109, 2, 2, 89, 90, 7, 99,
	2, 2, 90, 91, 7, 105, 2, 2, 91, 92, 7, 103, 2, 2, 92, 28, 3, 2, 2, 2, 93,
	94, 7, 116, 2, 2, 94, 95, 7, 103, 2, 2, 95, 96, 7, 118, 2, 2, 96, 97, 7,
	119, 2, 2, 97, 98, 7, 116, 2, 2, 98, 99, 7, 112, 2, 2, 99, 30, 3, 2, 2,
	2, 100, 101, 7, 117, 2, 2, 101, 102, 7, 118, 2, 2, 102, 103, 7, 116, 2,
	2, 103, 104, 7, 119, 2, 2, 104, 105, 7, 101, 2, 2, 105, 106, 7, 118, 2,
	2, 106, 32, 3, 2, 2, 2, 107, 108, 7, 118, 2, 2, 108, 109, 7, 123, 2, 2,
	109, 110, 7, 114, 2, 2, 110, 111, 7, 103, 2, 2, 111, 34, 3, 2, 2, 2, 112,
	114, 9, 2, 2, 2, 113, 112, 3, 2, 2, 2, 114, 36, 3, 2, 2, 2, 115, 116, 4,
	50, 59, 2, 116, 38, 3, 2, 2, 2, 117, 123, 5, 35, 18, 2, 118, 122, 5, 35,
	18, 2, 119, 122, 5, 37, 19, 2, 120, 122, 7, 97, 2, 2, 121, 118, 3, 2, 2,
	2, 121, 119, 3, 2, 2, 2, 121, 120, 3, 2, 2, 2, 122, 125, 3, 2, 2, 2, 123,
	121, 3, 2, 2, 2, 123, 124, 3, 2, 2, 2, 124, 40, 3, 2, 2, 2, 125, 123, 3,
	2, 2, 2, 126, 128, 9, 3, 2, 2, 127, 126, 3, 2, 2, 2, 128, 129, 3, 2, 2,
	2, 129, 127, 3, 2, 2, 2, 129, 130, 3, 2, 2, 2, 130, 131, 3, 2, 2, 2, 131,
	132, 8, 21, 2, 2, 132, 42, 3, 2, 2, 2, 133, 134, 7, 49, 2, 2, 134, 135,
	7, 44, 2, 2, 135, 139, 3, 2, 2, 2, 136, 138, 11, 2, 2, 2, 137, 136, 3,
	2, 2, 2, 138, 141, 3, 2, 2, 2, 139, 140, 3, 2, 2, 2, 139, 137, 3, 2, 2,
	2, 140, 142, 3, 2, 2, 2, 141, 139, 3, 2, 2, 2, 142, 143, 7, 44, 2, 2, 143,
	144, 7, 49, 2, 2, 144, 145, 3, 2, 2, 2, 145, 146, 8, 22, 3, 2, 146, 44,
	3, 2, 2, 2, 147, 148, 7, 49, 2, 2, 148, 149, 7, 49, 2, 2, 149, 153, 3,
	2, 2, 2, 150, 152, 10, 4, 2, 2, 151, 150, 3, 2, 2, 2, 152, 155, 3, 2, 2,
	2, 153, 151, 3, 2, 2, 2, 153, 154, 3, 2, 2, 2, 154, 156, 3, 2, 2, 2, 155,
	153, 3, 2, 2, 2, 156, 157, 8, 23, 3, 2, 157, 46, 3, 2, 2, 2, 9, 2, 113,
	121, 123, 129, 139, 153, 4, 8, 2, 2, 2, 3, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'('", "')'", "','", "';'", "'{'", "'_'", "'='", "'}'", "'.'", "'func'",
	"'interface'", "'main'", "'package'", "'return'", "'struct'", "'type'",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "FUNC", "INTERFACE", "MAIN", "PACKAGE",
	"RETURN", "STRUCT", "TYPE", "NAME", "WHITESPACE", "COMMENT", "LINE_COMMENT",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
	"FUNC", "INTERFACE", "MAIN", "PACKAGE", "RETURN", "STRUCT", "TYPE", "LETTER",
	"DIGIT", "NAME", "WHITESPACE", "COMMENT", "LINE_COMMENT",
}

type FGGLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewFGGLexer(input antlr.CharStream) *FGGLexer {

	l := new(FGGLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "FGG.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// FGGLexer tokens.
const (
	FGGLexerT__0         = 1
	FGGLexerT__1         = 2
	FGGLexerT__2         = 3
	FGGLexerT__3         = 4
	FGGLexerT__4         = 5
	FGGLexerT__5         = 6
	FGGLexerT__6         = 7
	FGGLexerT__7         = 8
	FGGLexerT__8         = 9
	FGGLexerFUNC         = 10
	FGGLexerINTERFACE    = 11
	FGGLexerMAIN         = 12
	FGGLexerPACKAGE      = 13
	FGGLexerRETURN       = 14
	FGGLexerSTRUCT       = 15
	FGGLexerTYPE         = 16
	FGGLexerNAME         = 17
	FGGLexerWHITESPACE   = 18
	FGGLexerCOMMENT      = 19
	FGGLexerLINE_COMMENT = 20
)
